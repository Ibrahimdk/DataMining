# -*- coding: utf-8 -*-
"""DecisionTreeIrisCSVibra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O3rbluxVmhC23HiL05k5fs65OmFks903
"""

#Import Library numpy, pandas dan scikit_learn
import numpy as np
import pandas as pd
from sklearn import tree

#membaca dataset dari file ke pandas dataframe
irisDataset = pd.read_csv('Dataset Iris.csv', delimiter=';', header=0)

irisDataset.head()

irisDataset["Species"] = pd.factorize(irisDataset.Species)[0]

irisDataset.head()

print(irisDataset)

#menghapus kolom "id"  
irisDataset = irisDataset.drop(labels="Id", axis=1)

print(irisDataset)

#Mengubah dataframe ke array numpy 
irisDataset = irisDataset.to_numpy()

print(irisDataset)

#Membagi Dataset => 80 Baris Data untuk training dan 20 baris data untuk testing
dataTraining = np.concatenate((irisDataset[0:40, :], irisDataset[50:90, :]),
                              axis=0)
dataTesting = np.concatenate((irisDataset[40:50, :], irisDataset[90:100, :]),
                             axis=0)

print(dataTesting)
len(dataTesting)

#memecah Dataset ke Input dan label
inputTraining = dataTraining[:, 0:4]
inputTesting = dataTesting[:, 0:4]
labelTraining = dataTraining[:, 4]
labelTesting = dataTesting[:, 4]
print(labelTraining)
len(labelTraining)

#mendefinisikan decision Tree Classifier
model = tree.DecisionTreeClassifier()

#Mentraining Model
model = model.fit(inputTraining, labelTraining)

#Memprediksi input data Testing
hasilPrediksi = model.predict(inputTesting)
print("Label Sebenarnya : ", labelTesting)
print("Hasil Prediksi", hasilPrediksi)

#Menghitung Akurasi
prediksiBenar = (hasilPrediksi == labelTesting).sum()
prediksiSalah = (hasilPrediksi != labelTesting).sum()
print("Prediksi Benar : ", prediksiBenar, "data")
print("Prediksi Salah : ", prediksiSalah, "data")
print("Akurasi : ", prediksiBenar/(prediksiBenar+prediksiSalah)*100, "%")